// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "space e",
    "command": "runCommands",
    "when": "explorerViewletFocus",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusFirstEditorGroup"
      ]
    }
  },
  {
    "key": "escape",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "searchViewletFocus"
  },
  {
    "key": "space e",
    "command": "runCommands",
    "when": "scmViewletFocus",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusFirstEditorGroup"
      ]
    }
  },
  {
    "key": "ctrl+w v",
    "command": "workbench.action.splitEditor",
    "when": "editorTextFocus && neovim.mode != insert",
  },
  {
    "key": "ctrl+w s",
    "command": "workbench.action.splitEditorDown",
    "when": "editorTextFocus && neovim.mode != insert",
  },
  {
    "key": "shift+h",
    "command": "workbench.action.focusLeftGroupWithoutWrap",
    "when": "editorTextFocus && neovim.mode != insert",
  },
  {
    "key": "shift+h",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "explorerViewletFocus",
  },
  {
    "key": "shift+h",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "searchViewletFocus",
  },
  {
    "key": "ctrl+h",
    "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.openNextRecentlyUsedEditorInGroup",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "shift+l",
    "command": "runCommands",
    "when": "editorTextFocus && neovim.mode != insert && !activeEditorGroupLast",
    "args": {
      "commands": [
        "workbench.action.focusRightGroupWithoutWrap"
      ]
    }
  },
  {
    "key": "shift+l",
    "command": "workbench.action.focusSideBar",
    "when": "editorTextFocus && neovim.mode != insert && activeEditorGroupLast && sideBarVisible"
  },
  {
    "key": "shift+j",
    "command": "workbench.action.focusBelowGroup",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "shift+k",
    "command": "workbench.action.focusAboveGroup",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "escape",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "sideBarVisible && sideBarFocus"
  },
  {
    "key": "ctrl+y",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "alt+\\",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "cmd+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+p",
    "command": "-vscode-neovim.send-cmdline",
    "when": "neovim.init && neovim.mode == 'cmdline'"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "cmd+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+v",
    "command": "search.action.openResultToSide",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+j",
    "command": "search.action.focusNextSearchResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "search.action.focusPreviousSearchResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "-search.action.openResultToSide",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+u",
    "command": "cursorPageUp",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "ctrl+d",
    "command": "cursorPageDown",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "shift+>",
    "command": "editor.action.indentLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+<",
    "command": "editor.action.outdentLines",
    "when": "textInputFocus && !editorReadonly && neovim.mode != insert"
  },
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "textInputFocus && !editorReadonly && neovim.mode != insert"
  },
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "textInputFocus && !editorReadonly && neovim.mode != insert"
  },
  {
    "key": "g d",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && neovim.mode != insert"
  },
  {
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  {
    "key": "n",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed == false && findWidgetVisible && neovim.mode != insert"
  },
  {
    "key": "shift+n",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed == false && findWidgetVisible && neovim.mode != insert"
  },
  {
    "key": "alt+n",
    "command": "composer.createNewWithPrevContext",
    "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
  },
  {
    "key": "cmd+n",
    "command": "-composer.createNewWithPrevContext",
    "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
  },
]